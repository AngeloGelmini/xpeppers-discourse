---
- name: ensure docker is running
  service: name=docker state=restarted
  sudo: yes

- name: add discourse user
  user: name=discourse groups=sudo,admin

- name: copy discourse source
  synchronize: src={{playbook_dir}}/../discourse_docker/ dest={{ discourse_location }} rsync_opts="--exclude=.git"
  sudo: yes

- name: fix discourse permissions
  file: path={{ discourse_location }} owner=discourse group=discourse recurse=yes
  register: discourse_copied

- name: check if SSL support have to be enabled
  local_action: stat path={{ role_path }}/files/ssl.key
  register: enable_ssl_support

- name: Create {{ discourse_location }}/shared/standalone/ssl directory
  file: path={{ discourse_location }}/shared/standalone/ssl state=directory owner=discourse group=discourse
  when: enable_ssl_support.stat.exists

- name: copy ssl key
  copy: src=ssl.key dest={{ discourse_location }}/shared/standalone/ssl/ssl.key owner=discourse group=discourse
  when: enable_ssl_support.stat.exists

- name: copy ssl crt
  copy: src=ssl.crt dest={{ discourse_location }}/shared/standalone/ssl/ssl.crt owner=discourse group=discourse
  when: enable_ssl_support.stat.exists

- name: check if discourse is running
  command: docker ps --filter name=app --filter status=running
  register: discourse_is_running

- name: stop already running instance of discourse and rebuild it
  command: echo rebuilding discourse
  when: discourse_is_running|succeeded
  notify:
    - stop discourse
    - rebuild discourse

- name: build and run discourse
  command: echo rebuilding discourse
  when: discourse_is_running|failed
  notify:
    - rebuild discourse

- name: check for backup.cron.sh
  local_action: stat path={{ role_path }}/files/backup.cron.sh
  register: backup_cron_exists

- name: copy backup.cron.sh
  sudo: yes
  copy: src=backup.cron.sh dest={{ discourse_location }}/backup.cron.sh owner=discourse group=discourse
  when: backup_cron_exists.stat.exists

# # # runs cron script @ 10,16,22:00 => 8,14,20:00 GMT+1
- name: enable backup.cron.sh
  sudo: yes
  cron: name="run backup cron script" minute="0" hour="10,16,22" job="sh {{ discourse_location }}/backup.cron.sh"
  when: backup_cron_exists.stat.exists
